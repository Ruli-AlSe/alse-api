---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/v1/posts":
    post:
      summary: Posts create
      tags:
      - Posts
      parameters: []
      security:
      - Bearer: []
      responses:
        '201':
          description: successful
        '401':
          description: not authorized
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/post"
        description: JSON to create the post
    get:
      summary: Posts list
      tags:
      - Posts
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/v1/posts/{id}":
    delete:
      summary: Delete a post
      tags:
      - Posts
      parameters:
      - name: id
        in: path
        type: string
        description: Post id
        schema:
          "$ref": "#/components/schemas/post_id"
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    put:
      summary: Posts update
      tags:
      - Posts
      parameters:
      - name: id
        in: path
        description: Post id
        schema:
          "$ref": "#/components/schemas/post_id"
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/post"
        description: JSON to update the post
  "/v1/posts/{post_id}/restore":
    post:
      summary: Restore a post
      tags:
      - Posts
      parameters:
      - name: post_id
        in: path
        type: string
        description: Post id
        schema:
          "$ref": "#/components/schemas/post_id"
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
  "/v1/profiles/{id}":
    get:
      summary: Profiles show
      tags:
      - Profiles
      parameters:
      - name: id
        in: path
        description: profile id
        schema:
          "$ref": "#/components/schemas/profile_id"
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
    put:
      summary: Profiles update
      tags:
      - Profiles
      parameters:
      - name: id
        in: path
        description: profile id
        schema:
          "$ref": "#/components/schemas/profile_id"
        required: true
      security:
      - Bearer: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/profile"
        description: JSON to update the profile
  "/v1/users":
    post:
      summary: Users register
      tags:
      - Users
      parameters: []
      security:
      - Bearer: []
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/user"
        description: JSON to create the user
  "/{locale}/v1/users/login":
    parameters:
    - name: locale
      in: path
      description: locale
      required: true
      schema:
        type: string
    post:
      summary: Users login
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/login_user"
        description: JSON to login
components:
  securitySchemes:
    Bearer:
      description: Bearer token of the logged user to access the API ressources
      type: apiKey
      in: header
      name: Authorization
  schemas:
    user:
      type: object
      properties:
        email:
          type: string
          required: true
        password:
          type: string
          required: true
        age:
          type: integer
          required: true
        company_attributes:
          type: object
          properties:
            name:
              type: string
              required: true
      example:
        user:
          email: test@example.com
          password: '12345678'
          age: 31
          company_attributes:
            name: test
    login_user:
      type: object
      properties:
        email:
          type: string
          required: true
        password:
          type: string
          required: true
      example:
        user:
          email: test@example.com
          password: '12345678'
    post_id:
      type: integer
      required: true
      example: 1
    profile_id:
      type: integer
      required: true
      example: 1
    post:
      type: object
      properties:
        title:
          type: string
          required: true
        content:
          type: string
          required: true
        image_url:
          type: string
          required: true
        credits:
          type: string
          required: false
      example:
        post:
          title: test
          content: post description
          image_url: image.url.com
          credits: "(page.link,page name,user name)"
    profile:
      type: object
      properties:
        name:
          type: string
          required: false
        last_name:
          type: string
          required: false
        headliner:
          type: string
          required: false
        bio:
          type: text
          required: false
        city:
          type: string
          required: false
        state:
          type: string
          required: false
        country:
          type: string
          required: false
        phone_number:
          type: string
          required: false
        social_media:
          type: string
          required: false
      example:
        profile:
          name: user name updated
          last_name: user last name updated
          headliner: user headliner updated
          bio: user bio updated
          city: city updated
          state: state updated
          country: country updated
          phone_number: phone number updated
          social_media: linkedin.com,facebook.com,instagram.com,github.com,whatsapp.com,x.com
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
